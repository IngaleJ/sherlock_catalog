{"version":3,"sources":["Components/CategoryButtons.js","Components/CrimeDetails.js","Components/CrimeContainer.js","App.js","serviceWorker.js","index.js"],"names":["CategoryButtons","props","ButtonGroup","spacing","categories","map","category","Button","key","onClick","onSelect","variantColor","variant","selectedCategory","size","style","marginBottom","CrimeDetails","SimpleGrid","minChildWidth","spacingX","spacingY","p","crimes","crime","Box","background","id","shadow","borderWidth","flex","rounded","Heading","fontSize","location","street","name","Text","mt","outcome_status","date","CrimeContainer","state","handleSelect","bind","fetch","then","response","json","data","Set","setState","this","filteredCrime","filter","Stack","as","length","Spinner","color","Component","App","className","ThemeProvider","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"6TAGe,SAASA,EAAiBC,GACvC,OACE,oCAEE,kBAACC,EAAA,EAAD,CAAaC,QAAS,GACnBF,EAAMG,WAAWC,KAAI,SAAAC,GAAQ,OAC5B,kBAACC,EAAA,EAAD,CACEC,IAAKF,EACLG,QAAS,WAAQR,EAAMS,SAASJ,IAChCK,aAAa,OACbC,QAAUN,IAAaL,EAAMY,iBAAmB,QAAU,UAC1DC,KAAK,KACLC,MAAO,CAAEC,aAAc,IAEtBV,Q,mCCdE,SAASW,EAAchB,GACpC,OACE,kBAACiB,EAAA,EAAD,CAAYC,cAAc,QAAQC,SAAS,OAAOC,SAAS,OAAOC,EAAE,QACjErB,EAAMsB,OAAOlB,KAAI,SAAAmB,GAAK,OACrB,kBAACC,EAAA,EAAD,CAAKC,WAAW,UAAUlB,IAAKgB,EAAMG,GAAIL,EAAG,EAAGM,OAAO,KAAKC,YAAY,MAAMC,KAAK,IAAIC,QAAQ,MAC5F,kBAACC,EAAA,EAAD,CAASC,SAAS,MAAMT,EAAMU,SAASC,OAAOC,MAC9C,kBAACC,EAAA,EAAD,CAAMC,GAAI,GAAId,EAAMe,eAAN,iBACFf,EAAMe,eAAeC,KADnB,aAC4BhB,EAAMe,eAAejC,UAC3D,cAEJ,kBAAC+B,EAAA,EAAD,kBAAiBb,EAAMlB,e,oBCRZmC,E,kDACnB,WAAaxC,GAAQ,IAAD,8BAClB,cAAMA,IACDyC,MAAQ,CACXnB,OAAQ,GACRnB,WAAY,GACZS,iBAAkB,OAEpB,EAAK8B,aAAe,EAAKA,aAAaC,KAAlB,gBAPF,E,gEAUE,IAAD,OACnBC,MAAM,+FACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJ,IAAM7C,EAAU,CAAI,OAAJ,mBAAc,IAAI8C,IAAID,EAAK5C,KAAI,SAAAmB,GAAK,OAAIA,EAAMlB,eAC9D,EAAK6C,SAAS,CAAE5B,OAAQ0B,EAAM7C,oB,mCAItBE,GACZ8C,KAAKD,SAAS,CACZtC,iBAAkBP,M,+BAIX,IAAD,EACyC8C,KAAKV,MAA9CtC,EADA,EACAA,WAAYmB,EADZ,EACYA,OAAQV,EADpB,EACoBA,iBACtBwC,EAAqC,QAArBxC,EAA6BU,EAAO+B,QAAO,SAAA9B,GAAK,OAAIA,EAAMlB,WAAaO,KAAoBU,EACjH,OACE,6BACE,kBAACgC,EAAA,EAAD,KACE,kBAACvB,EAAA,EAAD,CAASwB,GAAG,KAAK1C,KAAK,MAAtB,sBAGA,kBAACuB,EAAA,EAAD,CAAMJ,SAAS,MAAf,gEACA,kBAACI,EAAA,EAAD,CAAMJ,SAAS,MAAf,8FAEDoB,EAAcI,OACX,oCACA,kBAACzD,EAAD,CAAiBI,WAAYA,EAAYS,iBAAkBA,EAAkBH,SAAU0C,KAAKT,eAC5F,kBAAC1B,EAAD,CAAcM,OAAQ8B,EAAexC,iBAAkBA,KACnD,kBAAC6C,EAAA,EAAD,CAAS5C,KAAK,KAAK6C,MAAM,kB,GA1CGC,a,QCU7BC,MAVf,WACE,OACE,yBAAKC,UAAU,OACb,kBAACC,EAAA,EAAD,KACE,kBAAC,EAAD,SCGYC,QACW,cAA7BC,OAAO/B,SAASgC,UAEe,UAA7BD,OAAO/B,SAASgC,UAEhBD,OAAO/B,SAASgC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7B,MAAK,SAAA8B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.33665cb1.chunk.js","sourcesContent":["import React from 'react'\r\nimport { ButtonGroup, Button } from '@chakra-ui/core'\r\n\r\nexport default function CategoryButtons (props) {\r\n  return (\r\n    <>\r\n      {/* <Text fontSize='md'>Categories</Text> */}\r\n      <ButtonGroup spacing={4}>\r\n        {props.categories.map(category =>\r\n          <Button\r\n            key={category}\r\n            onClick={() => { props.onSelect(category) }}\r\n            variantColor='teal'\r\n            variant={ category === props.selectedCategory ? 'solid' : 'outline'}\r\n            size='sm'\r\n            style={{ marginBottom: 4 }}\r\n          >\r\n            {category}\r\n          </Button>\r\n        )}\r\n      </ButtonGroup>\r\n    </>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport {Box, Heading, Text, SimpleGrid } from '@chakra-ui/core'\r\n\r\nexport default function CrimeDetails (props) {\r\n  return (\r\n    <SimpleGrid minChildWidth='200px' spacingX='10px' spacingY='10px' p='16px'>\r\n      {props.crimes.map(crime =>\r\n        <Box background='#FAF089' key={crime.id} p={4} shadow='md' borderWidth='1px' flex='1' rounded='md'>\r\n          <Heading fontSize='md'>{crime.location.street.name}</Heading>\r\n          <Text mt={4}>{crime.outcome_status ?\r\n            `Status ${crime.outcome_status.date}: ${crime.outcome_status.category}`\r\n            : 'No outcome'}\r\n          </Text>\r\n          <Text>category: {crime.category}</Text>\r\n        </Box>)}\r\n    </SimpleGrid>\r\n  )\r\n}\r\n","import React, { Component } from 'react'\r\nimport CategoryButtons from './CategoryButtons'\r\nimport CrimeDetails from './CrimeDetails'\r\nimport { Text, Stack, Heading, Spinner } from '@chakra-ui/core'\r\n\r\nexport default class CrimeContainer extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.state = {\r\n      crimes: [],\r\n      categories: [],\r\n      selectedCategory: 'All'\r\n    }\r\n    this.handleSelect = this.handleSelect.bind(this)\r\n  }\r\n\r\n  componentDidMount () {\r\n    fetch('https://data.police.uk/api/crimes-street/all-crime?lat=51.523819&lng=-0.158470&date=2020-04')\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        const categories = ['All', ...new Set(data.map(crime => crime.category))]\r\n        this.setState({ crimes: data, categories })\r\n      })\r\n  }\r\n\r\n  handleSelect (category) {\r\n    this.setState({\r\n      selectedCategory: category\r\n    })\r\n  }\r\n\r\n  render () {\r\n    const { categories, crimes, selectedCategory } = this.state\r\n    const filteredCrime = selectedCategory !== 'All' ? crimes.filter(crime => crime.category === selectedCategory) : crimes\r\n    return (\r\n      <div>\r\n        <Stack>\r\n          <Heading as=\"h1\" size=\"xl\">\r\n            Sherlock's Catalog\r\n          </Heading>\r\n          <Text fontSize='xl'>Catalog of cases near Baker street in Scotland Yard records.</Text>\r\n          <Text fontSize='md'> Click on category to filter records. Card shows crime location and investigation status </Text>\r\n        </Stack>\r\n        {filteredCrime.length\r\n          ? <>\r\n            <CategoryButtons categories={categories} selectedCategory={selectedCategory} onSelect={this.handleSelect} />\r\n            <CrimeDetails crimes={filteredCrime} selectedCategory={selectedCategory} />\r\n          </> : <Spinner size=\"xl\" color=\"blue.500\"/>}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react'\nimport './App.css'\nimport CrimeContainer from './Components/CrimeContainer'\nimport { ThemeProvider } from '@chakra-ui/core'\n\nfunction App () {\n  return (\n    <div className='App'>\n      <ThemeProvider>\n        <CrimeContainer />\n      </ThemeProvider>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}