{"version":3,"sources":["Components/CategoryButtons.js","Components/CrimeDetails.js","Components/CrimeContainer.js","App.js","serviceWorker.js","index.js"],"names":["CategoryButtons","props","style","margin","padding","categories","map","category","key","onClick","onSelect","CrimeDetails","textAlign","selectedCategory","crimes","crime","id","JSON","stringify","CrimeContainer","state","handleSelect","bind","fetch","then","response","json","data","Set","setState","this","filteredCrime","filter","length","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"kQAEe,SAASA,EAAiBC,GACvC,OACE,yBAAKC,MAAO,CAAEC,OAAQ,EAAGC,QAAS,IAC/BH,EAAMI,WAAWC,KAAI,SAAAC,GAAQ,OAAI,4BAAQC,IAAKD,EAAUE,QAAS,WAAQR,EAAMS,SAASH,IAAaL,MAAO,CAAEE,QAAS,EAAGD,OAAQ,IAAMI,OCHhI,SAASI,EAAcV,GACpC,OACE,yBAAKC,MAAO,CAAEU,UAAW,OAAQT,OAAQ,GAAIC,QAAS,KACpD,2CAAiBH,EAAMY,kBAAoB,OAC1CZ,EAAMa,OAAOR,KAAI,SAAAS,GAAK,OAAI,yBAAKP,IAAKO,EAAMC,IAAKC,KAAKC,UAAUH,EAAO,KAAM,Q,ICF7DI,E,kDACnB,WAAalB,GAAQ,IAAD,8BAClB,cAAMA,IACDmB,MAAQ,CACXN,OAAQ,GACRT,WAAY,GACZQ,iBAAkB,MAEpB,EAAKQ,aAAe,EAAKA,aAAaC,KAAlB,gBAPF,E,gEAUE,IAAD,OACnBC,MAAM,+FACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJ,IAAMtB,EAAU,CAAI,OAAJ,mBAAc,IAAIuB,IAAID,EAAKrB,KAAI,SAAAS,GAAK,OAAIA,EAAMR,eAC9D,EAAKsB,SAAS,CAAEf,OAAQa,EAAMtB,oB,mCAItBE,GACZuB,KAAKD,SAAS,CACZhB,iBAA+B,QAAbN,EAAqB,KAAOA,M,+BAIvC,IAAD,EACyCuB,KAAKV,MAA9Cf,EADA,EACAA,WAAYS,EADZ,EACYA,OAAQD,EADpB,EACoBA,iBACtBkB,EAAgBlB,EAAmBC,EAAOkB,QAAO,SAAAjB,GAAK,OAAIA,EAAMR,WAAaM,KAAoBC,EACvG,OACE,6BACE,kDACA,kEACCiB,EAAcE,OACX,oCACA,kBAACjC,EAAD,CAAiBK,WAAYA,EAAYK,SAAUoB,KAAKT,eACxD,kBAACV,EAAD,CAAcG,OAAQiB,EAAelB,iBAAkBA,KACnD,gD,GArC4BqB,aCQ7BC,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.d0fc5888.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function CategoryButtons (props) {\r\n  return (\r\n    <div style={{ margin: 8, padding: 8 }}>\r\n      {props.categories.map(category => <button key={category} onClick={() => { props.onSelect(category) }} style={{ padding: 8, margin: 4 }}>{category}</button>)}\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function CrimeDetails (props) {\r\n  return (\r\n    <div style={{ textAlign: 'left', margin: 16, padding: 16 }}>\r\n      <h5>Category :- {props.selectedCategory || 'All'}</h5>\r\n      {props.crimes.map(crime => <pre key={crime.id}>{JSON.stringify(crime, null, 2)}</pre>)}\r\n    </div>\r\n  )\r\n}\r\n","import React, { Component } from 'react'\r\nimport CategoryButtons from './CategoryButtons'\r\nimport CrimeDetails from './CrimeDetails'\r\n\r\nexport default class CrimeContainer extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.state = {\r\n      crimes: [],\r\n      categories: [],\r\n      selectedCategory: null\r\n    }\r\n    this.handleSelect = this.handleSelect.bind(this)\r\n  }\r\n\r\n  componentDidMount () {\r\n    fetch('https://data.police.uk/api/crimes-street/all-crime?lat=51.523819&lng=-0.158470&date=2020-04')\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        const categories = ['All', ...new Set(data.map(crime => crime.category))]\r\n        this.setState({ crimes: data, categories })\r\n      })\r\n  }\r\n\r\n  handleSelect (category) {\r\n    this.setState({\r\n      selectedCategory: category === 'All' ? null : category\r\n    })\r\n  }\r\n\r\n  render () {\r\n    const { categories, crimes, selectedCategory } = this.state\r\n    const filteredCrime = selectedCategory ? crimes.filter(crime => crime.category === selectedCategory) : crimes\r\n    return (\r\n      <div>\r\n        <h2>Sherlock's Catalog</h2>\r\n        <h4>Catalog of cases in Scotland Yard </h4>\r\n        {filteredCrime.length\r\n          ? <>\r\n            <CategoryButtons categories={categories} onSelect={this.handleSelect} />\r\n            <CrimeDetails crimes={filteredCrime} selectedCategory={selectedCategory} />\r\n          </> : <div>Loading...</div>}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react'\nimport './App.css'\nimport CrimeContainer from './Components/CrimeContainer'\n\nfunction App () {\n  return (\n    <div className='App'>\n      <CrimeContainer />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}